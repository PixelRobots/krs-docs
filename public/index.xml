<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KRS</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on KRS</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Overview</title>
      <link>http://localhost:1313/docs/getting-started/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/getting-started/overview/</guid>
      <description>KRS is an innovative AI-powered tool designed to simplify and streamline your Kubernetes cluster management. Imagine having an intelligent co-pilot for your cluster, offering insights and functionalities to optimize performance and maintain smooth operation. That&amp;rsquo;s exactly what KRS provides.&#xA;Why Use KRS? Effortless Optimization: KRS analyzes your Kubernetes cluster&amp;rsquo;s configuration and resource usage. Based on this intelligent assessment, it recommends the most suitable tools to address your specific needs, ensuring an optimized environment.</description>
    </item>
    <item>
      <title>Manual</title>
      <link>http://localhost:1313/docs/tasks/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/tasks/manual/</guid>
      <description>KRS empowers you to manage your Kubernetes clusters with the help of cutting-edge Artificial Intelligence. This guide equips you with everything you need to get started and unlock the potential of KRS&amp;rsquo;s intelligent recommendations, proactive problem detection, and powerful health checks.&#xA;Prerequisites Up and Running Kubernetes Cluster: Ensure you have a Kubernetes cluster running locally (e.g., Minikube, etc) or in the cloud (e.g., Amazon EKS, Google Kubernetes Engine, etc), if on the cloud, ensure that you&amp;rsquo;ve secured a config file, before using KRS.</description>
    </item>
    <item>
      <title>Azure EKS</title>
      <link>http://localhost:1313/docs/tutorials/aks/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/tutorials/aks/</guid>
      <description>Optimize your AKS cluster management with KRS. This powerful tool, installed locally on your machine, analyzes your AKS cluster to identify areas for improvement. KRS leverages AI to provide recommendations for enhancing your cluster&amp;rsquo;s efficiency and functionality.&#xA;Prerequisites: An Azure account Install Azure CLI on your laptop Installation Clone the repository using the command&#xA;git clone https://github.com/kubetoolsca/krs.git Install the Krs Tool&#xA;Change directory to /krs and run the following command to install krs locally on your system:</description>
    </item>
    <item>
      <title>DigitalOcean</title>
      <link>http://localhost:1313/docs/tutorials/aws/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/tutorials/aws/</guid>
      <description>KRS is your Kubernetes sidekick, effortlessly optimizing your Digital Ocean cluster. Simply install, initialize, and scan to uncover hidden potential.&#xA;Prerequisites Digital Ocean Account Homebrew(if you&amp;rsquo;re on Mac) Getting Started Setup a Kubernetes Cluster on Digital Ocean&#xA;Install and Setup doctl on your Local Machine&#xA;If on Ubuntu use:&#xA;sudo snap install doctl sudo snap connect doctl:kube-config sudo snap connect doctl:ssh-keys :ssh-keys sudo snap connect doctl:dot-docker If on Mac, use:</description>
    </item>
    <item>
      <title>Docker Desktop</title>
      <link>http://localhost:1313/docs/tasks/docker-desktop/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/tasks/docker-desktop/</guid>
      <description>Discover how to easily install and configure Krs using Docker Desktop. This guide will walk you through the steps to get your Kubernetes cluster up and running efficiently.&#xA;Prerequisites Kubectl Getting Started Setup Docker and Kubernetes Install Docker Desktop&#xA;Enable Kubernetes under Docker Desktop&#xA;Enabling Kubernetes in Docker Desktop is straightforward. Check the &amp;ldquo;Enable Kubernetes&amp;rdquo; box in Docker Desktop settings. Once the download and setup process completes, you&amp;rsquo;ll see indicators confirming that both Docker and Kubernetes are running.</description>
    </item>
    <item>
      <title>OpenAI</title>
      <link>http://localhost:1313/docs/v_ai/aks/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/v_ai/aks/</guid>
      <description>Leverage OpenAI&amp;rsquo;s powerful language models to enhance Krs&amp;rsquo; problem-solving and recommendation capabilities.&#xA;Prerequisites Existing Kubernetes cluster: Ensure you have a Kubernetes cluster running locally (e.g., Minikube, etc) or in the cloud (e.g., Amazon EKS, Google Kubernetes Engine, etc), if on the cloud, ensure that you&amp;rsquo;ve secured a config file, before using KRS.&#xA;Python 3.6+: KRS is a Python-based tool, so make sure you have Python 3.6 or a later version installed on your system.</description>
    </item>
    <item>
      <title>AWS EKS</title>
      <link>http://localhost:1313/docs/tutorials/eks/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/tutorials/eks/</guid>
      <description>Optimize your EKS cluster with KRS. KRS running locally on your machine, analyzes your EKS cluster for improvement. Leverage KRS to gain valuable insights and recommendations for a smoother Kubernetes experience.&#xA;Prerequisites AWS Account AWSCLI installed on your system Homebrew(if you&amp;rsquo;re on Mac) Getting Started Setup Amazon EKS Cluster&#xA;eksctl create cluster --name &amp;lt;cluster_name&amp;gt; --version &amp;lt;kubernetes_version&amp;gt; --region &amp;lt;aws_region_name e.g us-east-1&amp;gt; --nodegroup-name &amp;lt;linux_nodes&amp;gt; --node-type &amp;lt;node_type&amp;gt; --nodes &amp;lt;number_of_nodes&amp;gt; --zones=&amp;lt;zone_names, e.g: us-east-1a,us-east-1b&amp;gt; Authenticate your AWS account</description>
    </item>
    <item>
      <title>Google&#39;s GKE</title>
      <link>http://localhost:1313/docs/tutorials/gke/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/tutorials/gke/</guid>
      <description>Effortlessly optimize your GKE cluster with KRS. This powerful tool, running locally on your machine, analyzes your GKE cluster for improvement. Leverage KRS to gain valuable insights and recommendations for a smoother Kubernetes experience.&#xA;Prerequisite A Google Cloud Account Installing Google Cloud SDK on your macOS Getting Started Execute the following command to install Google Cloud SDK in your system&#xA;tar xfz google-cloud-sdk-195.0.0-darwin-x86_64.tar.gz ./google-cloud-sdk/install.sh Enable Google Cloud Engine API&#xA;Authenticate Your Google Cloud using gcloud auth</description>
    </item>
    <item>
      <title>Kind</title>
      <link>http://localhost:1313/docs/tasks/kind/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/tasks/kind/</guid>
      <description>Prerequisites Podman, Docker, or Virtual Box (container runtime) Kubectl go (version 1.16+) Getting Started Setup a Kind Kubernetes Cluster on your Local Machine&#xA;go install sigs.k8s.io/kind@v0.23.0 &amp;amp;&amp;amp; kind create cluster Setup KRS using these commands&#xA;git clone https://github.com/kubetoolsca/krs.git cd krs pip install . Initialize KRS to permit it access to your cluster using the given command&#xA;krs init Get a view of all possible actions with KRS, by running the given command</description>
    </item>
    <item>
      <title>Minikube</title>
      <link>http://localhost:1313/docs/tasks/minikube/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/tasks/minikube/</guid>
      <description>Minikube: Your local Kubernetes playground. Quickly spin up a single-node cluster and pair it with KRS for effortless cluster optimization.&#xA;Prerequisites Podman, Docker, or Virtual Box (container runtime) Kubectl Getting Started Setup a MiniKube Kubernetes Cluster on your Local Machine&#xA;curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 sudo install minikube-linux-amd64 /usr/local/bin/minikube &amp;amp;&amp;amp; rm minikube-linux-amd64 minikube start Setup KRS using these commands&#xA;git clone https://github.com/kubetoolsca/krs.git cd krs pip install . Initialize KRS to permit it access to your cluster using the given command</description>
    </item>
    <item>
      <title>LocalAI</title>
      <link>http://localhost:1313/docs/v_ai/aws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/v_ai/aws/</guid>
      <description>LocalAI coming soon</description>
    </item>
    <item>
      <title>HuggingFace</title>
      <link>http://localhost:1313/docs/v_ai/eks/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/v_ai/eks/</guid>
      <description>Leverage HuggingFace&amp;rsquo;s powerful language models to enhance Krs&amp;rsquo; problem-solving and recommendation capabilities.&#xA;Prerequisites Existing Kubernetes cluster Ensure you have a Kubernetes cluster running locally (e.g., Minikube, etc) or in the cloud (e.g., Amazon EKS, Google Kubernetes Engine, etc), if on the cloud, ensure that you&amp;rsquo;ve secured a config file, before using KRS.&#xA;Python 3.6+: KRS is a Python-based tool, so make sure you have Python 3.6 or a later version installed on your system.</description>
    </item>
    <item>
      <title>Contribution Guidelines</title>
      <link>http://localhost:1313/docs/contribution-guidelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/contribution-guidelines/</guid>
      <description>Thank you for your interest in contributing to the Kubernetes Resource Scanner (KRS) tool! We welcome your contributions and are excited to help make this project better.&#xA;Code of Conduct Before contributing, please review and adhere to the Code of Conduct. We expect all contributors to follow these guidelines to ensure a positive and inclusive environment.&#xA;Release Management and Pull Request Submission Guidelines Repository Branch Structure Our project employs a three-branch workflow to manage the development and release of new features and fixes:</description>
    </item>
    <item>
      <title>How It Works</title>
      <link>http://localhost:1313/docs/getting-started/how-it-works/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/getting-started/how-it-works/</guid>
      <description>The Kubernetes Resource Scanner (KRS) utilizes a multi-faceted approach to empower you with intelligent Kubernetes cluster management. This section delves into the core functionalities and the underlying Artificial Intelligence (AI) mechanisms that drive KRS&amp;rsquo;s effectiveness.&#xA;Comprehensive Cluster Analysis Initial Scan: Upon executing krs scan, KRS conducts a comprehensive scan of your Kubernetes cluster. This scan meticulously identifies the tools currently deployed within your environment, providing valuable insights into your existing infrastructure.</description>
    </item>
    <item>
      <title>Architecture</title>
      <link>http://localhost:1313/docs/getting-started/architecture/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/getting-started/architecture/</guid>
      <description>Introduction The Kubetools Recommender System (KRS) is a tool designed to assist Kubernetes administrators in optimizing their cluster configurations by recommending suitable tools based on the existing setup. This document outlines the core components of KRS and their interactions.&#xA;System Architecture Overview CLI (Command-Line Interface) The user&amp;rsquo;s primary interaction point with the system Provides commands for scanning, recommending tools, performing health checks, and managing system state Orchestrates interactions with other components Scanner Responsible for interacting with the Kubernetes API to gather information about the cluster&amp;rsquo;s resources (pods, services, deployments, etc.</description>
    </item>
    <item>
      <title>CLI Reference</title>
      <link>http://localhost:1313/docs/cli-reference/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/cli-reference/</guid>
      <description>The KRS CLI provides a powerful set of commands for interacting with your Kubernetes clusters and leveraging KRS&amp;rsquo;s intelligent features. This section serves as a comprehensive reference guide for all available commands and their functionalities.&#xA;krs --help Usage: krs [OPTIONS] COMMAND [ARGS]... krs: A command line interface to scan your Kubernetes Cluster, detect errors, provide resolutions using LLMs and recommend latest tools for your cluster ╭─ Options ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮ │ --install-completion Install completion for the current shell.</description>
    </item>
    <item>
      <title>Search Results</title>
      <link>http://localhost:1313/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/search/</guid>
      <description></description>
    </item>
  </channel>
</rss>
